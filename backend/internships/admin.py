from django.contrib import admin
from django.contrib import messages
from django.utils.html import format_html
from django import forms
from .models import University, Company, Internship, Student, Application


class StudentAdminForm(forms.ModelForm):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –º–æ–¥–µ–ª—å—é –Ω–∞–ø—Ä—è–º—É—é
    skills_text = forms.CharField(
        label='–ù–∞–≤—ã–∫–∏',
        widget=forms.Textarea(attrs={'rows': 3, 'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'}),
        required=False,
        help_text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )
    interests_text = forms.CharField(
        label='–ò–Ω—Ç–µ—Ä–µ—Å—ã',
        widget=forms.Textarea(attrs={'rows': 3, 'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'}),
        required=False,
        help_text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )
    
    class Meta:
        model = Student
        fields = '__all__'
        exclude = ['skills', 'interests']  # –ò—Å–∫–ª—é—á–∞–µ–º JSON –ø–æ–ª—è –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if self.instance and self.instance.pk:
            if self.instance.skills:
                self.initial['skills_text'] = ', '.join(self.instance.skills)
            if self.instance.interests:
                self.initial['interests_text'] = ', '.join(self.instance.interests)
    
    def clean_skills_text(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–≤—ã–∫–æ–≤ –≤ JSON —Å–ø–∏—Å–æ–∫"""
        skills_text = self.cleaned_data.get('skills_text', '')
        if skills_text and skills_text.strip():
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            skills_list = [skill.strip() for skill in skills_text.split(',') if skill.strip()]
            return skills_list
        return []
    
    def clean_interests_text(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ JSON —Å–ø–∏—Å–æ–∫"""
        interests_text = self.cleaned_data.get('interests_text', '')
        if interests_text and interests_text.strip():
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            interests_list = [interest.strip() for interest in interests_text.split(',') if interest.strip()]
            return interests_list
        return []
    
    def clean(self):
        """–û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        cleaned_data = super().clean()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –≤ JSON —Å–ø–∏—Å–∫–∏
        if 'skills_text' in cleaned_data:
            cleaned_data['skills'] = self.clean_skills_text()
        if 'interests_text' in cleaned_data:
            cleaned_data['interests'] = self.clean_interests_text()
        
        return cleaned_data
    
    def save(self, commit=True):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º JSON –ø–æ–ª–µ–π"""
        instance = super().save(commit=False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JSON –ø–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if hasattr(self, 'cleaned_data') and self.cleaned_data:
            if 'skills' in self.cleaned_data:
                skills_data = self.cleaned_data['skills']
                instance.skills = skills_data
            if 'interests' in self.cleaned_data:
                interests_data = self.cleaned_data['interests']
                instance.interests = interests_data
        
        if commit:
            instance.save()
        return instance


@admin.register(University)
class UniversityAdmin(admin.ModelAdmin):
    list_display = ['name', 'institution_type', 'created_at']
    list_filter = ['institution_type', 'created_at']
    search_fields = ['name']
    ordering = ['name']


@admin.register(Company)
class CompanyAdmin(admin.ModelAdmin):
    list_display = ['name', 'website', 'created_at']
    list_filter = ['created_at']
    search_fields = ['name', 'description']
    ordering = ['name']


@admin.register(Internship)
class InternshipAdmin(admin.ModelAdmin):
    list_display = ['company', 'position', 'location', 'start_date', 'end_date', 'is_active']
    list_filter = ['is_active', 'start_date', 'end_date', 'company', 'location']
    search_fields = ['position', 'description', 'company__name']
    filter_horizontal = ['universities']
    ordering = ['-created_at']


@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
    form = StudentAdminForm
    list_display = ['user', 'university', 'course', 'specialization', 'resume_status', 'is_active', 'created_at']
    list_filter = ['is_active', 'course', 'university', 'created_at']
    search_fields = ['user__username', 'user__first_name', 'user__last_name', 'specialization']
    readonly_fields = ['created_at', 'updated_at', 'resume_display']
    exclude = ['resume']
    ordering = ['-created_at']
    actions = ['delete_resume', 'clear_resume']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'university', 'course', 'specialization', 'is_active')
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('phone', 'bio')
        }),
        ('–†–µ–∑—é–º–µ', {
            'fields': ('resume_display',),
            
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('skills', 'interests'),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def resume_status(self, obj):
        if obj.resume:
            return format_html(
                '<span style="color: green;">‚úì –ï—Å—Ç—å —Ä–µ–∑—é–º–µ</span><br>'
                '<a href="{}" target="_blank" style="font-size: 12px;">–°–∫–∞—á–∞—Ç—å</a>',
                obj.resume.url
            )
        return format_html('<span style="color: red;">‚úó –ù–µ—Ç —Ä–µ–∑—é–º–µ</span>')
    resume_status.short_description = '–†–µ–∑—é–º–µ'
    
    def resume_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if obj.resume:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                file_size = obj.resume.size
                size_mb = file_size / (1024 * 1024)
                size_text = f"{size_mb:.2f} MB"
            except:
                size_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            return format_html(
                '<div style="padding: 15px; background: #f0f9ff; border: 1px solid #e6f7ff; border-radius: 6px; margin-bottom: 10px;">'
                '<div style="display: flex; align-items: center; margin-bottom: 10px;">'
                '<span style="font-size: 20px; margin-right: 8px;">üìÑ</span>'
                '<strong style="color: #1890ff;">–¢–µ–∫—É—â–µ–µ —Ä–µ–∑—é–º–µ</strong>'
                '</div>'
                '<div style="margin-bottom: 10px;">'
                '<strong>–§–∞–π–ª:</strong> <span style="color: #1890ff;">{}</span><br>'
                '<strong>–†–∞–∑–º–µ—Ä:</strong> <span style="color: #666;">{}</span>'
                '</div>'
                '<div style="border-top: 1px solid #e6f7ff; padding-top: 10px;">'
                '<a href="{}" target="_blank" style="color: #1890ff; text-decoration: none; margin-right: 15px;">'
                'üîó –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ</a>'
                '<a href="#" class="delete-resume-btn" style="color: #ff4d4f; text-decoration: none;">'
                'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ</a>'
                '</div>'
                '</div>',
                obj.resume.name,
                size_text,
                obj.resume.url
            )
        return format_html(
            '<div style="padding: 15px; background: #fff2f0; border: 1px solid #ffccc7; border-radius: 6px; margin-bottom: 10px;">'
            '<div style="display: flex; align-items: center;">'
            '<span style="font-size: 20px; margin-right: 8px;">‚ö†Ô∏è</span>'
            '<span style="color: #ff4d4f; font-weight: 500;">–†–µ–∑—é–º–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</span>'
            '</div>'
            '</div>'
        )
    resume_display.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—é–º–µ'
    
    def delete_resume(self, request, queryset):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ —É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        updated = 0
        for student in queryset:
            if student.resume:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
                student.resume.delete(save=False)
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                student.resume = None
                student.save()
                updated += 1
        
        if updated:
            self.message_user(
                request,
                f'–†–µ–∑—é–º–µ —É–¥–∞–ª–µ–Ω–æ —É {updated} —Å—Ç—É–¥–µ–Ω—Ç(–æ–≤).',
                messages.SUCCESS
            )
        else:
            self.message_user(
                request,
                '–£ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
                messages.WARNING
            )
    delete_resume.short_description = '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ —É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
    
    def clear_resume(self, request, queryset):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ —Ä–µ–∑—é–º–µ (–Ω–µ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª)"""
        updated = queryset.filter(resume__isnull=False).update(resume=None)
        
        if updated:
            self.message_user(
                request,
                f'–ü–æ–ª–µ —Ä–µ–∑—é–º–µ –æ—á–∏—â–µ–Ω–æ —É {updated} —Å—Ç—É–¥–µ–Ω—Ç(–æ–≤).',
                messages.SUCCESS
            )
        else:
            self.message_user(
                request,
                '–£ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.',
                messages.WARNING
            )
    clear_resume.short_description = '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ —Ä–µ–∑—é–º–µ (–Ω–µ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª)'
    
    class Media:
        js = ('admin/js/resume_admin.js',)


@admin.register(Application)
class ApplicationAdmin(admin.ModelAdmin):
    list_display = ['student', 'internship', 'status', 'created_at']
    list_filter = ['status', 'created_at', 'internship__company']
    search_fields = ['student__user__username', 'student__user__first_name', 'student__user__last_name', 'internship__position']
    readonly_fields = ['created_at', 'updated_at']
    ordering = ['-created_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('student', 'internship', 'status')
        }),
        ('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', {
            'fields': ('comment',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
